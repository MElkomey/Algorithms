#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;






void print(int arr[], int size){
    for(int i=0;i<size;i++)
        cout<<arr[i]<<" ";
    cout<<endl;
}

///merge sort algorithm  time complexity O(nlogn) ,space complexity O(n)
void mergeAscending(int arr[], int l, int m, int r)//    m = l + (r - l) / 2;
{
    int i, j, k;
    int n1 = m - l + 1;// First subarray is arr[l..m]
    int n2 = r - m;// Second subarray is arr[m+1..r]
    int *L=new int[n1], *R=new int[n2];
    
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = j = 0;
    k = l;

    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}


void mergeSortAscending(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l + (r - l) / 2;
        
        mergeSortAscending(arr, l, m);
        mergeSortAscending(arr, m + 1, r);

        mergeAscending(arr, l, m, r);
    }
}


void mergeDescending(int arr[], int l, int m, int r)//    m = l + (r - l) / 2;
{
    int i, j, k;
    int n1 = m - l + 1;// First subarray is arr[l..m]
    int n2 = r - m;// Second subarray is arr[m+1..r]
    int *L=new int[n1], *R=new int[n2];
    
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = j = 0;
    k = l;

    while (i < n1 && j < n2)
    {
        if (L[i] >= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}


void mergeSortDescending(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l + (r - l) / 2;
        
        mergeSortDescending(arr, l, m);
        mergeSortDescending(arr, m + 1, r);

        mergeDescending(arr, l, m, r);
    }
}

int main() {
    int arr[]={10,1,11,9,12,-5};
    int size=sizeof(arr)/sizeof(arr[0]);
    mergeSortAscending(arr,0, size-1);
    mergeSortDescending(arr, 0, size-1);
        print(arr, size);
        
    return 0;
}